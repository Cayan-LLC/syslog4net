<?xml version="1.0" encoding="utf-8"?>
<topic id="22feb346-eb91-4204-8a78-4394769659c8" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->
      <para>Using and extending System.Diagnostics trace logging</para>
    </introduction>
    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="Section1">
      <title>Welcome</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->

<para>
Essential.Diagnostics and the .NET Framework System.Diagnostics provides powerful, flexible, high performance logging for applications -- and the core capabilities are already built into the .NET Framework!
</para>
<para>
This project uses the inbuilt features of the System.Diagnostics namespace, and shows how logging and tracing can be integrated into a client application by taking advantage of existing .NET Framework features.
</para>
<para>
This project also provides a library that enhances System.Diagnostics through it's numerous built-in extension points, but shouldn't require any changes to existing code (that uses the .NET Framework logging) to use some or all of the features.
</para>
<para>
Extension features provided by this project are marked  -- other features are already provided by the .NET Framework you are using right now.
</para>
<para>
To see how you can use System.Diagnostics and the Essential.Diagnostics extensions see Getting Started and the Logging Primer.
</para>

      </content>
    </section>
    <section address="Section2">
      <title>Features</title>
      <content>

<para>
System.Diagnostics and the Essential.Diagnostics extensions provides the following key features:
</para>
<para>

<list class="bullet">
<listItem>Multiple logging sources.</listItem>
<listItem>Output to multiple trace listeners with different filtering.</listItem>
<listItem>Logical operation context and activity correlation.</listItem>
<listItem>Multiple levels of event types including activity tracing.</listItem>
<listItem>Integrates with existing .NET Framework tracing (such as WCF).</listItem>
<listItem>Proven architecture.</listItem>
<listItem>Flexible and extensible design.</listItem>
<listItem>High performance.</listItem>
<listItem>No change required to existing .NET Framework trace statements.</listItem>
</list>

</para>
<para>
The Framework and extensions can be used to write information to any of the following Listeners:
</para>
<para>

<list class="bullet">
<listItem>A text file</listItem>
<listItem>The command console or colored console</listItem>
<listItem>The event log</listItem>
<listItem>ASP.NET tracing</listItem>
<listItem>An XML file (viewable using the Service Trace Viewer)</listItem>
<listItem>Event Tracing for Windows (Vista ETW)</listItem>
<listItem>A database</listItem>
</list>

</para>
<para>
Log information can be custom formatted and include context information such as:
</para>
<para>

<list class="bullet">
<listItem>Event id, type, and message</listItem>
<listItem>Source - allows you to partition your logs</listItem>
<listItem>Event time and date</listItem>
<listItem>Thread id, process id and call stack</listItem>
<listItem>Logical operation stack, activity id, and correlation</listItem>
<listItem>Machine name, user name and Windows Identity</listItem>
</list>

</para>        
        
      </content>
      <!-- If a section contains a sections element, its content creates
           sub-sections.  These are not collapsible.
      <sections>
          <section address="SubSection1">
              <title>Sub-section 1</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
          <section address="SubSection2">
              <title>Sub-section 2</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
      </sections> -->
    </section>
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>